// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: config.h.in,v 1.46.2.1 2005/07/11 16:30:08 oliver Exp $ 
//

#ifndef BALL_CONFIG_CONFIG_H
#define BALL_CONFIG_CONFIG_H

// Here are some global configuration flags for BALL

// This flag is used by GenericPDBFile
// if it is not set, the length of each line has
// to be meet the PDB spcifications exactly.
// As virtually no existing PDB file fulfills
// this requirement, we disencourage its usage.
// Nevertheless, it can be quite useful for debugging.
#undef BALL_STRICT_PDB_LINE_IMPORT

// BALL_DEBUG enables some debugging methods
// change the DEBUG entry in configure to define this flag.
// If in debug mode, inline functions won't be compiled
// as inline by defining BALL_NO_INLINE_FUNCTIONS
// This facilitates debugging, as the debugger can always
// find the corresponding source code line.
// See also COMMON/debug.h for these symbols.
#undef BALL_DEBUG
#undef BALL_NO_INLINE_FUNCTIONS


// This define is used to determine
// wheter BALL shall try to close a socket conection
// via shutdown or close (see socket.C).
#define BALL_USE_SOCKET_SHUTDOWN

// This define is used in string.C and enables a workaround
// on on of these poor systems that do not define vsnprintf.
#undef BALL_HAVE_VSNPRINTF

// The path to the directory where BALL is installed.
#define BALL_PATH "BALL"

// The string describing the binary format.
#define BALL_BINFMT "(unknown)"

// Used in COMMON/namespace.h to cause the inclusion of COMMON/memory.h.
#undef BALL_LOG_MEMORY
#define BALL_LOG_MEMORY_FILE "memory.log"

// Define architecture
#undef BALL_ARCH_SPARC
#undef BALL_ARCH_MIPS
#undef BALL_ARCH_I386
#undef BALL_ARCH_ALPHA
#undef BALL_ARCH_POWERPC

// Define OS
#undef BALL_OS_LINUX
#undef BALL_OS_SOLARIS
#undef BALL_OS_SUNOS
#undef BALL_OS_IRIX
#undef BALL_OS_IRIX32
#undef BALL_OS_IRIX64
#undef BALL_OS_FREEBSD
#undef BALL_OS_DARWIN

// Define compiler specifics (used in VERY few places only, e.g. COMMON/rtti.C).
// Microsoft Visual Studio .NET
#undef BALL_COMPILER_MSVC
// GNU g++
#undef BALL_COMPILER_GXX
// Intel C++
#undef BALL_COMPILER_INTEL
// SGI MipsPro
#undef BALL_COMPILER_MIPSPRO
// SUN SunPro (Forte, Workshop)
#undef BALL_COMPILER_SUNPRO
// Compaq cxx
#undef BALL_COMPILER_COMPAQ
// Kuck & Associate (KAI) C++
#undef BALL_COMPILER_KAI

// The compiler name.
#define BALL_COMPILER "unknown"

// Defines for the compiler version (major.minor.minor_minor)
#define BALL_COMPILER_VERSION_MAJOR 0
#define BALL_COMPILER_VERSION_MINOR 0
#define BALL_COMPILER_VERSION_MINOR_MINOR 0

// define if gethostname is supported
#undef BALL_HAVE_GETHOSTNAME

// define if sysinfo(SI_HOSTNAME,) has to be used instead of
// gethostname (older Solaris variants)
#undef BALL_HAVE_SYSINFO

// define if gethostname is not in the unistd.h header
#undef BALL_DEFINE_GETHOSTNAME

// Define if you have the inet_aton function.  
// Note: inet_aton is a marginally improved version of inet_addr
// If configure finds inet_aton, HAVE_INET_ATON is set and used
// in SYSTEM/socket.C.
#undef BALL_HAVE_INET_ATON

// Define the type needed for getsockname, getpeername, and accept
// This type is probably one of socklen_t, size_t, or int
// Refer to /usr/include/sys/socket.h in case of doubt
#define BALL_SOCKLEN_TYPE int

// define some symbols for the (bit)size of some builtin types
#define BALL_INT_SIZE 32
#define BALL_CHAR_SIZE 32
#define BALL_LONG_SIZE 32
#define BALL_SIZE_T_SIZE 32
#define BALL_POINTER_SIZE 32

// define symbols for the endianness of the system
#undef BALL_LITTLE_ENDIAN
#undef BALL_BIG_ENDIAN

// the signature of the function arguments used in xdrrec_create differs
// from platform to platform, so we define some symbols describing the
// correct arguments: (void*, char*, int), (char*, char*, int), or (void)
// take arguments of type (void*, char*, int)
#undef BALL_XDRREC_CREATE_VOID_VOID_INT
#undef BALL_XDRREC_CREATE_VOID_CHAR_INT
#undef BALL_XDRREC_CREATE_CHAR_CHAR_INT
#undef BALL_XDRREC_CREATE_VOID_VOID_UINT
#undef BALL_XDRREC_CREATE_VOID

// some platforms (e.g. Debian 2.1) do not provide xdr_u_hyper, so we 
// need a workaround for this
#undef BALL_HAS_XDR_U_HYPER 

// Define to `int' if <sys/types.h> doesn't define.  
#undef pid_t

// Define to `unsigned' if <sys/types.h> doesn't define.  
#undef size_t

// Define if you have the ANSI C header files.  
#undef STDC_HEADERS

// Define if numeric_limits is defined in <limits>
#undef BALL_HAS_NUMERIC_LIMITS

// Define the argument type for xdr_u_hyper (64 bit)
#define BALL_XDR_UINT64_TYPE u_quad_t

// Define on 64 bit architectures to avoid the use of long long
// which is required on 32 bit machines for comatibility
#undef BALL_64BIT_ARCHITECTURE

// Define a signed/unsigned numeric type of 64 bit length (used for
// platform independent persistence: stores pointers)
// this usually defaults to unsigned long on 64 bit architectures
// and unsigned long long on 32 bit machines
#define BALL_ULONG64_TYPE ""
#define BALL_LONG64_TYPE ""

// Defines an unsigned type that has the same length as size_t
#define BALL_SIZE_TYPE int

// Defines a signed type that has the same length as size_t
#define BALL_INDEX_TYPE int

// Defines an unsigned integer type of the same size as void*
#define BALL_POINTERSIZEUINT_TYPE int

// Define the template argument for friends of template classes:
// either "" or "<>"
#define BALL_NULL_TEMPLATE_ARGS ""

// Basically a work-around for the broken SUNPro CC (WS 6U2),
// which handles function template incorrectly -- see amberNonBonded.C
#undef BALL_MUST_CAST_TEMPLATE_FUNCTION_ARGS

// Define whether the compiler provides an ANSI-compliant implementation
// of <iostream>. This is required in COMMON/socket.h/C since we need
// the correct initialisation of the base classes. These base classes are
// either something like std::basic_ios<char> etc., or ios, istream etc.
#undef BALL_HAS_ANSI_IOSTREAM

// Define whether we can use <sstream> or whether we have to use the
// older <strstream>
#undef BALL_HAS_SSTREAM

// Define whether inline functions may be used as template parameters.
#undef BALL_HAS_INLINE_TPL_ARGS

// Define the precision for the BALL Complex type (has to be consistent
// with the FFTW precision, if included).
#define BALL_COMPLEX_PRECISION float

// Define whether the FFTW library/header is available.
#undef BALL_HAS_FFTW
#undef BALL_HAS_FFTW_H

// Define which versions of fftw can be used: double, float, long double
#undef BALL_HAS_FFTW_DOUBLE
#undef BALL_HAS_FFTW_FLOAT
#undef BALL_HAS_FFTW_LONG_DOUBLE

// QT options
#undef BALL_HAS_VIEW
#undef BALL_QT_HAS_THREADS
#undef BALL_QT_VERSION
#undef BALL_QT_VERSION_STR
#define QT_THREAD_SUPPORT

// Define whether to use the ARM style or ANSI style access modifications
//   ARM style:   BaseClass::foo;
//   ANSI style:  using BaseClass::foo;
#undef BALL_CFG_USING_METHOD_DIRECTIVE

// Define for activated PYTHON support
#undef BALL_PYTHON_SUPPORT

// Maximum line length for reading from files (see source/FORMAT)
#define BALL_MAX_LINE_LENGTH 65535

// on some systems (e.g. Solaris) we need to include /usr/include/ieeefp.h
// for some floating point functions
#undef BALL_HAS_IEEEFP_H

// on some systems (e.g. Solaris) we need to include /usr/include/values.h
// for some floating point functions
#undef BALL_HAS_VALUES_H

// on some systems, we do not have regex.h, so we have to use regexp.h
#undef BALL_HAS_REGEXP_H
#undef BALL_HAS_REGEX_H

// Define whether float.h has to be included along with limits.h
#undef BALL_HAS_FLOAT_H 

#undef BALL_HAS_UNISTD_H
#undef BALL_HAS_PROCESS_H
#undef BALL_HAS_TIME_H
#undef BALL_HAS_LIMITS_H
#undef BALL_HAS_FLOAT_H
#undef BALL_HAS_DIRENT_H
#undef BALL_HAS_DIRECT_H
#undef BALL_HAS_PWD_H
#undef BALL_HAS_SYS_IOCTL_H
#undef BALL_HAS_SYS_TIME_H
#undef BALL_HAS_SYS_STAT_H
#undef BALL_HAS_SYS_TIMES_H
#undef BALL_HAS_SYS_TYPES_H
#undef BALL_HAS_SYS_PARAM_H
#undef BALL_HAS_SYS_SOCKET_H
#undef BALL_HAS_SYS_SYSINFO_H

#undef BALL_HAS_NETINET_IN_H
#undef BALL_HAS_NETDB_H
#undef BALL_HAS_ARPA_INET_H

#undef BALL_HAS_KILL
#undef BALL_HAS_SYSCONF
#undef BALL_HAS_HYPOT

// Specific to the Windows port (and actually not used here,
// included for completeness, rather).
#undef BALL_HAS_CLOCKS_PER_SEC
#undef BALL_HAS_WINDOWS_PERFORMANCE_COUNTER
#undef BALL_USE_WINSOCK

#endif // BALL_CONFIG_CONFIG_H

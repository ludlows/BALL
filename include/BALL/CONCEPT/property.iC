// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: property.iC,v 1.30 2003/08/26 08:04:08 oliver Exp $
//

using namespace std;

BALL_INLINE 
PropertyManager::PropertyManager()
	throw()
{
}

BALL_INLINE 
PropertyManager::PropertyManager(const PropertyManager& property_manager)
	throw()
	:	bitvector_(property_manager.bitvector_),
		named_properties_(property_manager.named_properties_)
{
}

BALL_INLINE 
PropertyManager::~PropertyManager()
	throw()
{
}


BALL_INLINE 
void NamedProperty::clear()
	throw()
{
	// free allocated space for strings
	if ((type_ == STRING) && (data_.s != 0))
	{
		delete data_.s;
	}
	type_ = NONE;
	name_ = "";
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name)
	throw()
	: PersistentObject(),
		type_(NONE),
		name_(name)
{
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, bool value)
	throw()
	:	PersistentObject(),
		type_(BOOL),
		name_(name)
{
	data_.b = value;
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, int value)
	throw()
	:	PersistentObject(),
		type_(INT),
		name_(name)
{
	data_.i = value;
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, unsigned int value)
	throw()
	:	PersistentObject(),
		type_(UNSIGNED_INT),
		name_(name)
{
	data_.ui = value;
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, float value)
	throw()
	:	PersistentObject(),
		type_(FLOAT),
		name_(name)
{
	data_.f = value;
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, double value)
	throw()
	:	PersistentObject(),
		type_(DOUBLE),
		name_(name)
{
	data_.d = value;
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, const string& str)
	throw()
	:	PersistentObject(),
		type_(STRING),
		name_(name)
{
	data_.s = new string(str);
}

BALL_INLINE 
NamedProperty::NamedProperty(const string& name, PersistentObject& po)
	throw()
	:	PersistentObject(),
		type_(OBJECT),
		name_(name)
{
	data_.object = &po;
}

BALL_INLINE 
NamedProperty::~NamedProperty()
	throw()
{
	clear();
}

BALL_INLINE 
bool NamedProperty::operator == (const NamedProperty& np) const
	throw()
{
	if (type_	!= np.type_)
	{
		return false;
	}

	switch (type_)
	{
		case	INT:					return(data_.i			== np.data_.i);
		case	FLOAT:				return(data_.f			== np.data_.f);
		case	DOUBLE:				return(data_.d			== np.data_.d);
		case	UNSIGNED_INT:	return(data_.ui			== np.data_.ui);
		case	BOOL:					return(data_.b			== np.data_.b);
		case	OBJECT:				return(data_.object == np.data_.object);
		case	NONE:					return(true);	
		case	STRING:				return(*data_.s == *np.data_.s);	
		default:
		{
			Log.error() << "cannot write unknown property type: " << (int)type_ << endl;
		}
	}

	return true;
}

BALL_INLINE 
bool NamedProperty::operator != (const NamedProperty& np) const
	throw()
{
	return !(*this == np);
}
	

BALL_INLINE 
int NamedProperty::getInt() const
	throw()
{
	return (type_ == INT ? data_.i : 0);
}

BALL_INLINE 
float NamedProperty::getFloat() const
	throw()
{
	return (type_ == FLOAT ? data_.f : 
						(type_ == DOUBLE ? (float)data_.d : 
							(type_ == INT ? (float)data_.i : (float)0.0)));
}

BALL_INLINE 
double NamedProperty::getDouble() const
	throw()
{
	return (type_ == DOUBLE ? data_.d : 
						(type_ == FLOAT ? (double)data_.f : 
							(type_ == INT ? (double)data_.i : 0.0)));
}

BALL_INLINE 
string NamedProperty::getString() const
	throw()
{
	return (((type_ == STRING) && (data_.s != 0)) ? (*data_.s) : string(""));
}

BALL_INLINE 
unsigned int NamedProperty::getUnsignedInt() const
	throw()
{
	return (type_ == UNSIGNED_INT ? data_.ui : 0);
}

BALL_INLINE 
string NamedProperty::getName() const
	throw()
{
	return name_;
}

BALL_INLINE 
NamedProperty::Type NamedProperty::getType() const
	throw()
{
	return type_;
}

BALL_INLINE 
PersistentObject* NamedProperty::getObject() const
	throw()
{
	return (type_ == OBJECT ? data_.object : 0);
}

BALL_INLINE 
bool NamedProperty::getBool() const
	throw()
{
	return (type_ == BOOL ? data_.b : false);
}

BALL_INLINE 
void PropertyManager::clear()
	throw()
{
	bitvector_.clear();
	named_properties_.clear();
}

BALL_INLINE 
void PropertyManager::destroy()
	throw()
{
  clear();	// same as clear
}

BALL_INLINE 
const PropertyManager& PropertyManager::operator = (const PropertyManager& property_manager)
	throw()
{
  set(property_manager);
  return *this;
}

BALL_INLINE 
void PropertyManager::get(PropertyManager& property_manager) const
	throw()
{
  property_manager.set(*this);
}

BALL_INLINE 
BitVector& PropertyManager::getBitVector()
	throw()
{
  return bitvector_;
}

BALL_INLINE 
const BitVector& PropertyManager::getBitVector() const
	throw()
{
  return bitvector_;
}

BALL_INLINE
PropertyManager::operator BitVector & ()
	throw()
{
  return bitvector_;
}

BALL_INLINE 
void PropertyManager::setProperty(Property property)
	throw()
{
  bitvector_.setBit(property);
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, bool value)
	throw()
{
	setProperty(NamedProperty(name, value));
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, float value)
	throw()
{
	setProperty(NamedProperty(name, value));
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, double value)
	throw()
{
	setProperty(NamedProperty(name, value));
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, unsigned int value)
	throw()
{
	setProperty(NamedProperty(name, value));
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, int value)
	throw()
{
	setProperty(NamedProperty(name, value));
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, const string& value)
	throw()
{
	setProperty(NamedProperty(name, const_cast<string&>(value)));
}

BALL_INLINE 
void PropertyManager::setProperty(const string& name, const PersistentObject& value)
	throw()
{
	setProperty(NamedProperty(name, const_cast<PersistentObject&>(value)));
}

BALL_INLINE 
void PropertyManager::clearProperty(Property property)
	throw()
{
  bitvector_.setBit(property, false);
}

BALL_INLINE 
void PropertyManager::toggleProperty(Property property)
	throw()
{
  bitvector_.toggleBit(property);
}

BALL_INLINE 
void PropertyManager::swap(PropertyManager& property_manager)
	throw()
{
	BitVector tmp = bitvector_;
	bitvector_ = property_manager.bitvector_;
	property_manager.bitvector_ = tmp;
	named_properties_.swap(property_manager.named_properties_);
}

BALL_INLINE 
bool PropertyManager::hasProperty(Property property) const
	throw()
{
	if (bitvector_.getSize() <= (Size)property)
	{
		return false;
	}
  return bitvector_.getBit(property);
}

BALL_INLINE 
bool PropertyManager::isValid() const
	throw()
{
  return (bitvector_.isValid());
}

BALL_INLINE 
Size PropertyManager::countProperties() const
	throw()
{
  return ((Size)bitvector_.getSize() + (Size)named_properties_.size());
}

BALL_INLINE
const NamedProperty& PropertyManager::getNamedProperty(Position index) const
	throw(Exception::IndexOverflow)
{
	if (index >= named_properties_.size())
	{
		throw Exception::IndexOverflow(__FILE__, __LINE__, index, (Size)named_properties_.size());
	}
	return named_properties_[index];
}

BALL_INLINE
NamedProperty& PropertyManager::getNamedProperty(Position index)
	throw(Exception::IndexOverflow)
{
	if (index >= named_properties_.size())
	{
		throw Exception::IndexOverflow(__FILE__, __LINE__, index, (Size)named_properties_.size());
	}
	return named_properties_[index];
}

BALL_INLINE 
Size PropertyManager::countNamedProperties() const
	throw()
{
  return (Size)named_properties_.size();
}

BALL_INLINE 
bool PropertyManager::operator == (const PropertyManager& pm) const
	throw()
{
	return (bitvector_				== pm.bitvector_ &&
					named_properties_	== pm.named_properties_);
}

BALL_INLINE 
bool PropertyManager::operator != (const PropertyManager& pm) const
	throw()
{
	return (bitvector_				!= pm.bitvector_ ||
					named_properties_	!= pm.named_properties_);
}

// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: colorUnitHue.iC,v 1.6 2003/04/17 14:48:01 oliver Exp $

BALL_INLINE
ColorUnitHue::operator String () const
	throw()
{
  char temp[4];
  
  sprintf(&temp[0], "%x", (unsigned char)(value_ * 360.0));
  
  return String(&temp[0]);
}

BALL_INLINE
ColorUnitHue::operator short() const
	throw()
{
  return (short)(value_ * (float)360.0);
}

BALL_INLINE
ColorUnitHue::operator unsigned short () const
	throw()
{
  return (unsigned short)(value_ * (float)360.0);
}

BALL_INLINE 
ColorUnitHue::operator int () const
	throw()
{
  return (int)(value_ * (float)360.0);
}

BALL_INLINE
ColorUnitHue::operator unsigned int () const
	throw()
{
  return (unsigned int)(value_ * (float)360.0);
}

BALL_INLINE
ColorUnitHue::operator long () const
	throw()
{
  return (long)(value_ * (float)360.0);
}

BALL_INLINE
ColorUnitHue::operator unsigned long () const
	throw()
{
  return (unsigned long)(value_ * (float)360.0);
}

BALL_INLINE
ColorUnitHue::operator float () const
	throw()
{
  return value_;
}

BALL_INLINE
ColorUnitHue::operator double () const
	throw()
{
  return (double)value_;
}

BALL_INLINE
bool ColorUnitHue::operator ==
  (const ColorUnitHue& color_unit) const
	throw()
{
  return (BALL_REAL_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}

BALL_INLINE
bool ColorUnitHue::operator !=
  (const ColorUnitHue& color_unit) const
	throw()
{
  return (BALL_REAL_NOT_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnitHue::operator <
  (const ColorUnitHue& color_unit) const
	throw()
{
  return (BALL_REAL_LESS(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnitHue::operator <=
  (const ColorUnitHue &color_unit) const
	throw()
{
  return (BALL_REAL_LESS_OR_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnitHue::operator >
  (const ColorUnitHue& color_unit) const
	throw()
{
  return (BALL_REAL_GREATER(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnitHue::operator >=
  (const ColorUnitHue &color_unit) const
	throw()
{
  return (BALL_REAL_GREATER_OR_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}

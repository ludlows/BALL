// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: colorUnit.iC,v 1.7 2003/08/26 08:04:57 oliver Exp $
//

BALL_INLINE
ColorUnit::operator String () const
	throw()
{
  char temp[4];
  sprintf(&temp[0], "%x", (unsigned char)(value_ * 255.0));
  return String(&temp[0]);
}

BALL_INLINE
ColorUnit::operator char () const
	throw()
{
  return (char)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator unsigned char () const
	throw()
{
  return (unsigned char)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator short () const
	throw()
{
  return (short)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator unsigned short () const
	throw()
{
  return (unsigned short)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator int () const
	throw()
{
  return (int)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator unsigned int () const
	throw()
{
  return (unsigned int)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator long () const
	throw()
{
  return (long)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator unsigned long () const
	throw()
{
  return (unsigned long)(value_ * (float)255.0);
}

BALL_INLINE
ColorUnit::operator float () const
	throw()
{
  return value_;
}

BALL_INLINE
ColorUnit::operator double () const
	throw()
{
  return (double)value_;
}

BALL_INLINE
bool ColorUnit::operator == (const ColorUnit& color_unit) const
	throw()
{
  return (BALL_REAL_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}

BALL_INLINE
bool ColorUnit::operator != (const ColorUnit& color_unit) const
	throw()
{
  return (BALL_REAL_NOT_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnit::operator < (const ColorUnit& color_unit) const
	throw()
{
  return (BALL_REAL_LESS(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnit::operator <= (const ColorUnit& color_unit) const
	throw()
{
  return (BALL_REAL_LESS_OR_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnit::operator > (const ColorUnit& color_unit) const
	throw()
{
  return (BALL_REAL_GREATER(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}
    
BALL_INLINE
bool ColorUnit::operator >= (const ColorUnit& color_unit) const
	throw()
{
  return (BALL_REAL_GREATER_OR_EQUAL(value_, color_unit.value_, ::BALL::Constants::EPSILON));
}

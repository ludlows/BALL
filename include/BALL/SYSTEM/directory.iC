// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: directory.iC,v 1.16.6.2 2005/12/06 12:55:01 amoll Exp $
//

BALL_INLINE
void Directory::synchronize_()
{
	char* buffer;
	#ifdef BALL_COMPILER_MSVC
		buffer = ::_getcwd(NULL, MAX_PATH_LENGTH);
	  if (buffer != directory_path_)
		{
	    backup_path_ = buffer;
			::_chdir(directory_path_.data());
		}
	#else
		buffer = ::getcwd(NULL, MAX_PATH_LENGTH);
	  if (buffer != directory_path_)
		{
			backup_path_ = buffer;
			::chdir(directory_path_.data());
		}
	#endif
	free(buffer);
}

BALL_INLINE
bool Directory::desynchronize_(bool result1)
{
  if (backup_path_ == "") 
	{
		return result1;
	}
	#ifdef BALL_COMPILER_MSVC
	  bool result2 = (::_chdir(backup_path_.data()) == 0);
	#else
	  bool result2 = (::chdir(backup_path_.data()) == 0);
	#endif
  backup_path_ = "";

  return (result1 && result2);
}

BALL_INLINE 
void Directory::clear()
{
	#ifdef BALL_PLATFORM_WINDOWS
	if (dirent_ != INVALID_HANDLE_VALUE) FindClose(dirent_);
	if (dir_ != INVALID_HANDLE_VALUE) CloseHandle(dir_);
	#else
		if (dir_ != 0)
		{
			::closedir(dir_);
		}
	#endif
	dir_ = INVALID_HANDLE_VALUE;
	dirent_ = INVALID_HANDLE_VALUE;
  directory_path_ = "";
}

BALL_INLINE 
void Directory::destroy()
{
	clear();
}

BALL_INLINE
void Directory::set(const Directory& directory)
{
	clear();
  directory_path_ = directory.directory_path_;
  backup_path_ = "";
}

BALL_INLINE 
Directory& Directory::operator = (const Directory& directory)
{
  set(directory);
  return *this;
}

BALL_INLINE 
void Directory::get(Directory& directory) const
{
  directory.set(*this);
}

BALL_INLINE 
const String& Directory::getPath() const
{
  return directory_path_;
}

BALL_INLINE 
bool Directory::rename(String old_path, String new_path)
{ 
	synchronize_();	
	FileSystem::canonizePath(old_path);
	FileSystem::canonizePath(new_path);
	return desynchronize_((::rename(old_path.data(), new_path.data()) == 0));
}

BALL_INLINE 
bool Directory::setCurrent(String directory_path)
{
  FileSystem::canonizePath(directory_path);
	#ifdef BALL_PLATFORM_WINDOWS
		return (::_chdir(directory_path.data()) == 0);
	#else
		return (::chdir(directory_path.data()) == 0);
	#endif
}

BALL_INLINE 
bool Directory::setCurrent()
{
  return Directory::setCurrent(directory_path_);
}

BALL_INLINE 
bool Directory::create(String directory_path, const mode_t& mode)
{
	#ifdef BALL_COMPILER_MSVC
		if(!isValid()) return false;
		FileSystem::canonizePath(directory_path);
		if ((directory_path[0] == FileSystem::PATH_SEPARATOR) || (directory_path[1] == ':' && directory_path[2] == FileSystem::PATH_SEPARATOR))
		{
			return (::_mkdir(directory_path.data()) ==0);
		}
		synchronize_();			
		return desynchronize_(::_mkdir(directory_path.data()) ==0);
	#else
		FileSystem::canonizePath(directory_path);
		if (directory_path[0] == FileSystem::PATH_SEPARATOR)
		{
			return (::mkdir(directory_path.data(), mode) == 0);
		}
		synchronize_();	
		return desynchronize_((::mkdir(directory_path.data(), mode) == 0));
	#endif
}

BALL_INLINE 
bool Directory::remove(String directory_path)
{
	synchronize_();	
  FileSystem::canonizePath(directory_path);
	#ifdef BALL_COMPILER_MSVC

		// get alsolute path
		char* buffer = ::_getcwd(NULL, MAX_PATH_LENGTH);
		String old_dir(buffer);
		free(buffer);
		if(::_chdir(directory_path.data()) == 0)
		{	// determine absolute path
			buffer = ::_getcwd(NULL,MAX_PATH_LENGTH);
			directory_path = buffer;
			free(buffer);
			::_chdir(old_dir.data());
		}
		else
		{
			// cannot change to dir...return 
			return desynchronize_(false);
		}
			
		bool ok = desynchronize_((::_rmdir(directory_path.data()) == 0));
	#else
		bool ok = desynchronize_((::rmdir(directory_path.data()) == 0));
	#endif

		if (directory_path == directory_path_) 
		{
			clear();
		}

		return ok;
}

BALL_INLINE 
bool Directory::isEmpty()
{
  return (countItems() == 0);
}

BALL_INLINE 
bool Directory::operator == (const Directory& directory) const
{
  return (directory_path_ == directory.directory_path_);
}

BALL_INLINE 
bool Directory::operator != (const Directory& directory) const
{
  return (directory_path_ != directory.directory_path_);
}



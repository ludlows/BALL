// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: atom.iC,v 1.18.2.1 2005/11/03 14:17:55 oliver Exp $
//

BALL_INLINE
void Atom::setElement(const Element& element)
	throw()
{
	element_ = &element;
}

BALL_INLINE
const Element& Atom::getElement() const
	throw()
{
	return *element_;
}

BALL_INLINE
void Atom::setCharge(float charge)
	throw()
{
	static_attributes_[index_].charge = charge;
}

BALL_INLINE
float Atom::getCharge() const
	throw()
{
	return static_attributes_[index_].charge;
}

BALL_INLINE
void Atom::setFormalCharge(Index charge)
	throw()
{
	static_attributes_[index_].formal_charge = charge;
}

BALL_INLINE
Index Atom::getFormalCharge() const
	throw()
{
	return static_attributes_[index_].formal_charge;
}

BALL_INLINE
const String& Atom::getName() const
	throw()
{
	return name_;
}

BALL_INLINE
const Molecule* Atom::getMolecule() const	throw()
{
	return const_cast<Atom&>(*this).getMolecule();
}

BALL_INLINE
const Fragment* Atom::getFragment() const	throw()
{
	return const_cast<Atom&>(*this).getFragment();
}

BALL_INLINE
const Residue* Atom::getResidue() const throw()
{
	return const_cast<Atom&>(*this).getResidue();
}

BALL_INLINE
const Chain* Atom::getChain() const throw()
{
	return const_cast<Atom&>(*this).getChain();
}

BALL_INLINE
const SecondaryStructure* Atom::getSecondaryStructure() const throw()
{
	return const_cast<Atom&>(*this).getSecondaryStructure();
}

BALL_INLINE
void Atom::setName(const String& name)
	throw()
{
	name_ = name;
}

BALL_INLINE
void Atom::setPosition(const Vector3& position)
	throw()
{
	static_attributes_[index_].position.set(position);
}

BALL_INLINE
Vector3& Atom::getPosition()
	throw()
{
	return static_attributes_[index_].position;
}

BALL_INLINE
const Vector3& Atom::getPosition() const
	throw()
{
	return static_attributes_[index_].position;
}

BALL_INLINE
void Atom::setRadius(float radius)
	throw()
{
	radius_ = radius;
}

BALL_INLINE
float Atom::getRadius() const
	throw()
{
	return radius_;
}

BALL_INLINE
void Atom::setType(Type type)
	throw()
{
	static_attributes_[index_].type = type;
}

BALL_INLINE
Atom::Type Atom::getType() const
	throw()
{
	return static_attributes_[index_].type;
}

BALL_INLINE
void Atom::setTypeName(const String& type_name)
	throw()
{
	type_name_ = type_name;
}

BALL_INLINE
String Atom::getTypeName() const
	throw()
{
	return type_name_;
}

BALL_INLINE
void Atom::setVelocity(const Vector3& velocity)
	throw()
{
	static_attributes_[index_].velocity.set(velocity);
}

BALL_INLINE
const Vector3& Atom::getVelocity() const
	throw()
{
	return static_attributes_[index_].velocity;
}

BALL_INLINE
void Atom::setForce(const Vector3& force)
	throw()
{
	static_attributes_[index_].force.set(force);
}

BALL_INLINE
Vector3& Atom::getForce()
	throw()
{
	return static_attributes_[index_].force;
}

BALL_INLINE
const Vector3& Atom::getForce() const
	throw()
{
	return static_attributes_[index_].force;
}

BALL_INLINE
Position Atom::getIndex() const
{
	return index_;
}

BALL_INLINE
Atom::AttributeVector& Atom::getAttributes()
{
	return static_attributes_;
}

BALL_INLINE
Atom::StaticAtomAttributes* Atom::getAttributePtr()
{
	return &(static_attributes_[index_]);
}

BALL_INLINE
const Atom::StaticAtomAttributes* Atom::getAttributePtr() const
{
	return &(static_attributes_[index_]);
}

BALL_INLINE
void Atom::get(Atom& atom, bool deep) const
	throw()
{
	atom.set(*this, deep);
}

BALL_INLINE
bool Atom::operator == (const Atom& atom) const
	throw()
{
	return(Object::operator ==(atom));
}

BALL_INLINE
bool Atom::operator != (const Atom& atom) const
	throw()
{
	return ! (*this == atom);
}

BALL_INLINE
Size Atom::countBonds() const
	throw()
{
	return number_of_bonds_;
}

BALL_INLINE
bool Atom::isBound() const
	throw()
{
	return (number_of_bonds_ > 0);
}


